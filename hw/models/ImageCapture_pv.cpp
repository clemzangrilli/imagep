
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for ImageCapture.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2alpha1
//* Generated on: Jan. 20, 2016 10:06:23 AM, (user: markca)
//* Automatically merged on: Jan. 20, 2016 10:08:36 AM, (user: markca)
//* Automatically merged on: Feb. 02, 2016 10:59:37 AM, (user: markca)
//*>



#include "ImageCapture_pv.h"
#include <iostream>

#include "vista_fswebcam.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
ImageCapture_pv::ImageCapture_pv(sc_module_name module_name) 
  : ImageCapture_pv_base(module_name)
  ,mbFifo(1)
{
  vista_fswc_init();
  vista_fswc_pregrab();
  
  SC_THREAD(thread);
}   

void ImageCapture_pv::thread() {
  while(1) {
    mbFifo.peek(); // block/wait until start bit is written

    cout <<name()<<" @ "<<sc_time_stamp()<<" Capturing Image " << endl;;
    vista_fswc_grab();

    FILE *f = fopen("/tmp/hope.bmp", "rb");
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);

    char *b = (char*) malloc(fsize + 1);
    fread(b, fsize, 1, f);
    fclose(f);
    b[fsize] = 0;

    cout <<name()<<" @ "<<sc_time_stamp()<<" Writing data to " << TARGET << endl;

    master_write(TARGET , b, fsize);
    free(b);

    cout <<name()<<" @ "<<sc_time_stamp()<<" Setting SIZE to " << fsize << endl;
    SIZE = fsize;

    cout <<name()<<" @ "<<sc_time_stamp()<<" Triggering irq" << endl;
    irq.write(1);
    mbFifo.get();  // release Fifo, Done.
  }
}

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))

// Write callback for CONTROL register.
// The newValue has been already assigned to the CONTROL register.
void ImageCapture_pv::cb_write_CONTROL(unsigned long long newValue) {
  if (CHECK_BIT(CONTROL, 0)) {
    cout <<name()<<" @ "<<sc_time_stamp()<<" IC CONTROL start bit = 1" << endl;
    mbFifo.put(1);
  }
  else {
    cout <<name()<<" @ "<<sc_time_stamp()<<" IC CONTROL start bit = 0, resetting irq" << endl;
    irq.write(0);
  }
}

// Read callback for slave port.
// Returns true when successful.
bool ImageCapture_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.
bool ImageCapture_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned ImageCapture_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned ImageCapture_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool ImageCapture_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void ImageCapture_pv::cb_transport_dbg_CONTROL(tlm::tlm_generic_payload& trans) {}
