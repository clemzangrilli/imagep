
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for ImageCapture.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2alpha1
//* Generated on: Jan. 20, 2016 10:06:23 AM, (user: markca)
//* Automatically merged on: Jan. 20, 2016 10:08:36 AM, (user: markca)
//*>



#include "ImageCapture_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
ImageCapture_pv::ImageCapture_pv(sc_module_name module_name) 
  : ImageCapture_pv_base(module_name) {


  SC_THREAD(makeInterrupt);

}   

void ImageCapture_pv::makeInterrupt() {
  while(1) {
    wait(1000, SC_MS);
    interrupt.write(1);
  }
}

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for CONTROL register.
// The newValue has been already assigned to the CONTROL register.
void ImageCapture_pv::cb_write_CONTROL(unsigned long long newValue) {
  cout << "ImageCapture_pv::cb_write_CONTROL " << newValue << endl;

  interrupt.write(0);
}
    

// Read callback for from_bus port.
// Returns true when successful.
bool ImageCapture_pv::from_bus_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for from_bus port.
// Returns true when successful.
bool ImageCapture_pv::from_bus_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned ImageCapture_pv::from_bus_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned ImageCapture_pv::from_bus_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool ImageCapture_pv::from_bus_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void ImageCapture_pv::cb_transport_dbg_CONTROL(tlm::tlm_generic_payload& trans) {}
