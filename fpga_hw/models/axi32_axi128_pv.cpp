
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for axi32_axi128.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2alpha1
//* Generated on: Mar. 02, 2016 10:12:37 AM, (user: vista)
//*>



#include "axi32_axi128_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
axi32_axi128_pv::axi32_axi128_pv(sc_module_name module_name) 
  : axi32_axi128_pv_base(module_name) {
}      

// Read callback for slave port.
// Returns true when successful.
bool axi32_axi128_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  return master_read(address, data, size);
}

// Write callback for slave port.
// Returns true when successful.
bool axi32_axi128_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  return master_write(address, data, size);
} 




unsigned axi32_axi128_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned axi32_axi128_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool axi32_axi128_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

// in order to minimize merging conflicts, we recommend to add your functions after this comment
